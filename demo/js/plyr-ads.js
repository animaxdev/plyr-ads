!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define("PlyrAds",t):e.PlyrAds=t()}(this,function(){"use strict";var e={adTagUrl:"",skipButton:{enabled:!0,text:"Skip ad",delay:10}},t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},n=function(){function e(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,n,a){return n&&e(t.prototype,n),a&&e(t,a),t}}(),a=function(){function a(t,n){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),this.config=this._mergedConfig(e,n),this.config.startEvents=this._getStartEvents(),this.plyr=t,this.adDisplayContainer,this.adDisplayElement,this.adsManager,this.adsLoader,!this.config.adTagUrl)throw new Error("No adTagUrl provided.");if(!window.google)throw new Error("The Google IMA3 SDK is not loaded.");this._setupAdDisplayContainer(),this._setupIMA(),this._setupListeners()}return n(a,[{key:"_setupIMA",value:function(){var e=this,t=this.plyr.elements.container;this.adsLoader=new google.ima.AdsLoader(this.adDisplayContainer),this.adsLoader.getSettings().setAutoPlayAdBreaks(!1),this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,function(t){return e._onAdsManagerLoaded(t)},!1),this.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR,function(t){return e._onAdError(t)},!1);var n=new google.ima.AdsRequest;n.adTagUrl=this.config.adTagUrl,n.linearAdSlotWidth=t.offsetWidth,n.linearAdSlotHeight=t.offsetHeight,n.nonLinearAdSlotWidth=t.offsetWidth,n.nonLinearAdSlotHeight=t.offsetHeight,this.adsLoader.requestAds(n)}},{key:"_onAdsManagerLoaded",value:function(e){var t=this,n=new google.ima.AdsRenderingSettings;n.restoreCustomPlaybackStateOnAdBreakComplete=!0,console.log(this.plyr.currentTime),console.log(this.plyr.duration),this.adsManager=e.getAdsManager({currentTime:this.plyr.currentTime,duration:this.plyr.duration},n),this.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR,function(e){return t._onAdError(e)}),this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED,function(e){return t._onContentPauseRequested(e)}),this.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED,function(e){return t._onAdEvent(e)}),this.adsManager.addEventListener(google.ima.AdEvent.Type.AD_BREAK_READY,function(){console.log("AD_BREAK_READY")}),this.adsManager.addEventListener(google.ima.AdEvent.Type.LOADED,function(e){return t._onAdEvent(e)}),this.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED,function(e){return t._onAdEvent(e)}),this.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE,function(e){return t._onAdEvent(e)})}},{key:"_onAdEvent",value:function(e){var t=this.plyr.elements.container,n=e.getAd();switch(e.type){case google.ima.AdEvent.Type.LOADED:console.log("LOADED"),n.isLinear()||(n.width=t.offsetWidth,n.height=t.offsetHeight);break;case google.ima.AdEvent.Type.STARTED:console.log("STARTED");break;case google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED:console.log("CONTENT_PAUSE_REQUESTED");case google.ima.AdEvent.Type.COMPLETE:console.log("COMPLETE"),this.plyr.play();break;case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:console.log("ALL_ADS_COMPLETED")}}},{key:"_onAdError",value:function(e){if(this.adDisplayElement.remove(),this.adsManager&&this.adsManager.destroy(),this.config.debug)throw new Error(e)}},{key:"_onContentPauseRequested",value:function(){console.log("CONTENT_RESUME_REQUESTED")}},{key:"_setupAdDisplayContainer",value:function(){var e=this.plyr.elements.container;this.adDisplayContainer=new google.ima.AdDisplayContainer(e),this.adDisplayElement=e.firstChild,this.adDisplayElement.removeAttribute("style"),this.adDisplayElement.setAttribute("class","plyr-ads"),this._setOnClickHandler(this.adDisplayElement,this._playAds)}},{key:"_playAds",value:function(){var e=this.plyr.elements.container;this.adDisplayContainer.initialize(),this.adsManager.init(e.offsetWidth,e.offsetHeight,google.ima.ViewMode.NORMAL),this.adsManager.start()}},{key:"_setupListeners",value:function(){var e=this;this.plyr.on("ended",function(t){console.log("ENDED"),e.adsLoader.contentComplete()}),this.plyr.on("statechange",function(t){1===t.detail.code&&(console.log("YOUTUBE ENDED"),e.adsLoader.contentComplete())})}},{key:"_setOnClickHandler",value:function(e,t){var n=this,a=function(a){e.addEventListener(a,function(e){("touchend"===e.type&&"touchstart"===a||"click"===e.type)&&t.call(n)},{once:!0})},o=!0,i=!1,r=void 0;try{for(var s,d=this.config.startEvents[Symbol.iterator]();!(o=(s=d.next()).done);o=!0){a(s.value)}}catch(e){i=!0,r=e}finally{try{!o&&d.return&&d.return()}finally{if(i)throw r}}}},{key:"_mergedConfig",value:function(e,n){return t({},e,n)}},{key:"_getStartEvents",value:function(){var e=["click"];return(navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/Android/i))&&(e=["touchstart","touchend","touchmove"]),e}}]),a}();return{init:function(e,t){return new a(e,t)}}});

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGx5ci1hZHMuanMiLCJzb3VyY2VzIjpbInNyYy9qcy9kZWZhdWx0cy5qcyIsInNyYy9qcy9wbHlyLWFkcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmNvbnN0IGRlZmF1bHRzID0ge1xuICAgIGFkVGFnVXJsOiAnJyxcbiAgICBza2lwQnV0dG9uOiB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWUsXG4gICAgICAgIHRleHQ6ICdTa2lwIGFkJyxcbiAgICAgICAgZGVsYXk6IDEwXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBkZWZhdWx0czsiLCJcbi8qKlxuICogVE9ET1xuICogXG4gKiAtIFJlc3BvbnNpdmUgb24gc2NhbGluZ1xuICovIFxuXG5cbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzJztcblxuY2xhc3MgUGx5ckFkcyB7XG5cbiAgY29uc3RydWN0b3IodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgdGhpcy5jb25maWcgPSB0aGlzLl9tZXJnZWRDb25maWcoZGVmYXVsdHMsIG9wdGlvbnMpO1xuICAgIHRoaXMuY29uZmlnLnN0YXJ0RXZlbnRzID0gdGhpcy5fZ2V0U3RhcnRFdmVudHMoKTtcbiAgICBcbiAgICB0aGlzLnBseXIgPSB0YXJnZXQ7XG4gICAgdGhpcy5hZERpc3BsYXlDb250YWluZXI7XG4gICAgdGhpcy5hZERpc3BsYXlFbGVtZW50O1xuICAgIHRoaXMuYWRzTWFuYWdlcjtcbiAgICB0aGlzLmFkc0xvYWRlcjtcblxuICAgIC8vIENoZWNrIGlmIGEgYWRUYWdVcmwgdXMgcHJvdmlkZWQuXG4gICAgaWYgKCF0aGlzLmNvbmZpZy5hZFRhZ1VybCkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vIGFkVGFnVXJsIHByb3ZpZGVkLicpOyB9XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgR29vZ2xlIElNQTMgU0RLIGlzIGxvYWRlZC5cbiAgICBpZiAoIXdpbmRvdy5nb29nbGUpIHsgdGhyb3cgbmV3IEVycm9yKCdUaGUgR29vZ2xlIElNQTMgU0RLIGlzIG5vdCBsb2FkZWQuJyk7IH1cblxuICAgIC8vIFNldHVwIHRoZSBhZCBkaXNwbGF5IGNvbnRhaW5lci5cbiAgICB0aGlzLl9zZXR1cEFkRGlzcGxheUNvbnRhaW5lcigpO1xuXG4gICAgLy8gU2V0dXAgdGhlIElNQSBTREsuXG4gICAgdGhpcy5fc2V0dXBJTUEoKTtcblxuICAgIC8vIFNldCBsaXN0ZW5lcnMgb24gdGhlIFBseXIgaW5zdGFuY2UuXG4gICAgdGhpcy5fc2V0dXBMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIF9zZXR1cElNQSgpIHtcbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gdGhpcy5wbHlyLmVsZW1lbnRzO1xuXG4gICAgLy8gQ3JlYXRlIGFkcyBsb2FkZXIuXG4gICAgdGhpcy5hZHNMb2FkZXIgPSBuZXcgZ29vZ2xlLmltYS5BZHNMb2FkZXIodGhpcy5hZERpc3BsYXlDb250YWluZXIpO1xuXG4gICAgLy8gVGVsbCB0aGUgYWRzTG9hZGVyIHdlIGFyZSBoYW5kbGluZyBhZCBicmVha3MgbWFudWFsbHkuXG4gICAgdGhpcy5hZHNMb2FkZXIuZ2V0U2V0dGluZ3MoKS5zZXRBdXRvUGxheUFkQnJlYWtzKGZhbHNlKTtcblxuICAgIC8vIExpc3RlbiBhbmQgcmVzcG9uZCB0byBhZHMgbG9hZGVkIGFuZCBlcnJvciBldmVudHMuXG4gICAgdGhpcy5hZHNMb2FkZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgZ29vZ2xlLmltYS5BZHNNYW5hZ2VyTG9hZGVkRXZlbnQuVHlwZS5BRFNfTUFOQUdFUl9MT0FERUQsXG4gICAgICAgIGFkRXZlbnQgPT4gdGhpcy5fb25BZHNNYW5hZ2VyTG9hZGVkKGFkRXZlbnQpLFxuICAgICAgICBmYWxzZSk7XG4gICAgdGhpcy5hZHNMb2FkZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgZ29vZ2xlLmltYS5BZEVycm9yRXZlbnQuVHlwZS5BRF9FUlJPUixcbiAgICAgICAgYWRFcnJvciA9PiB0aGlzLl9vbkFkRXJyb3IoYWRFcnJvciksXG4gICAgICAgIGZhbHNlKTtcblxuICAgIC8vIFJlcXVlc3QgdmlkZW8gYWRzLlxuICAgIGNvbnN0IGFkc1JlcXVlc3QgPSBuZXcgZ29vZ2xlLmltYS5BZHNSZXF1ZXN0KCk7XG4gICAgYWRzUmVxdWVzdC5hZFRhZ1VybCA9IHRoaXMuY29uZmlnLmFkVGFnVXJsO1xuXG4gICAgLy8gU3BlY2lmeSB0aGUgbGluZWFyIGFuZCBub25saW5lYXIgc2xvdCBzaXplcy4gVGhpcyBoZWxwcyB0aGUgU0RLIHRvXG4gICAgLy8gc2VsZWN0IHRoZSBjb3JyZWN0IGNyZWF0aXZlIGlmIG11bHRpcGxlIGFyZSByZXR1cm5lZC5cbiAgICBhZHNSZXF1ZXN0LmxpbmVhckFkU2xvdFdpZHRoID0gY29udGFpbmVyLm9mZnNldFdpZHRoO1xuICAgIGFkc1JlcXVlc3QubGluZWFyQWRTbG90SGVpZ2h0ID0gY29udGFpbmVyLm9mZnNldEhlaWdodDtcbiAgICBhZHNSZXF1ZXN0Lm5vbkxpbmVhckFkU2xvdFdpZHRoID0gY29udGFpbmVyLm9mZnNldFdpZHRoO1xuICAgIGFkc1JlcXVlc3Qubm9uTGluZWFyQWRTbG90SGVpZ2h0ID0gY29udGFpbmVyLm9mZnNldEhlaWdodDtcblxuICAgIHRoaXMuYWRzTG9hZGVyLnJlcXVlc3RBZHMoYWRzUmVxdWVzdCk7XG4gIH1cblxuICBfb25BZHNNYW5hZ2VyTG9hZGVkKGFkc01hbmFnZXJMb2FkZWRFdmVudCkge1xuICAgIGNvbnN0IHsgb3JpZ2luYWwgfSA9IHRoaXMucGx5ci5lbGVtZW50cztcblxuICAgIC8vIEdldCB0aGUgYWRzIG1hbmFnZXIuXG4gICAgY29uc3QgYWRzUmVuZGVyaW5nU2V0dGluZ3MgPSBuZXcgZ29vZ2xlLmltYS5BZHNSZW5kZXJpbmdTZXR0aW5ncygpO1xuICAgIGFkc1JlbmRlcmluZ1NldHRpbmdzLnJlc3RvcmVDdXN0b21QbGF5YmFja1N0YXRlT25BZEJyZWFrQ29tcGxldGUgPSB0cnVlO1xuICAgIFxuICAgIGNvbnNvbGUubG9nKHRoaXMucGx5ci5jdXJyZW50VGltZSk7XG4gICAgY29uc29sZS5sb2codGhpcy5wbHlyLmR1cmF0aW9uKTtcblxuICAgIC8vIFRoZSBTREsgaXMgcG9sbGluZyBjdXJyZW50VGltZSBvbiB0aGUgY29udGVudFBsYXliYWNrLiBBbmQgbmVlZHMgYSBkdXJhdGlvblxuICAgIC8vIHNvIGl0IGNhbiBkZXRlcm1pbmUgd2hlbiB0byBzdGFydCB0aGUgbWlkLSBhbmQgcG9zdC1yb2xsLlxuICAgIHRoaXMuYWRzTWFuYWdlciA9IGFkc01hbmFnZXJMb2FkZWRFdmVudC5nZXRBZHNNYW5hZ2VyKFxuICAgICAge1xuICAgICAgICBjdXJyZW50VGltZTogdGhpcy5wbHlyLmN1cnJlbnRUaW1lLFxuICAgICAgICBkdXJhdGlvbjogdGhpcy5wbHlyLmR1cmF0aW9uXG4gICAgICB9LCBhZHNSZW5kZXJpbmdTZXR0aW5ncyk7XG5cbiAgICAvLyBBZGQgbGlzdGVuZXJzIHRvIHRoZSByZXF1aXJlZCBldmVudHMuXG4gICAgdGhpcy5hZHNNYW5hZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIGdvb2dsZS5pbWEuQWRFcnJvckV2ZW50LlR5cGUuQURfRVJST1IsXG4gICAgICAgIGFkRXJyb3IgPT4gdGhpcy5fb25BZEVycm9yKGFkRXJyb3IpKTtcbiAgICB0aGlzLmFkc01hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgZ29vZ2xlLmltYS5BZEV2ZW50LlR5cGUuQ09OVEVOVF9QQVVTRV9SRVFVRVNURUQsXG4gICAgICAgIGFkRXZlbnQgPT4gdGhpcy5fb25Db250ZW50UGF1c2VSZXF1ZXN0ZWQoYWRFdmVudCkpO1xuICAvLyAgIHRoaXMuYWRzTWFuYWdlci5hZGRFdmVudExpc3RlbmVyKFxuICAvLyAgICAgICBnb29nbGUuaW1hLkFkRXZlbnQuVHlwZS5DT05URU5UX1JFU1VNRV9SRVFVRVNURUQsXG4gIC8vICAgICAgIHRoaXMuX29uQ29udGVudFJlc3VtZVJlcXVlc3RlZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmFkc01hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgZ29vZ2xlLmltYS5BZEV2ZW50LlR5cGUuQUxMX0FEU19DT01QTEVURUQsXG4gICAgICAgIGFkRXZlbnQgPT4gdGhpcy5fb25BZEV2ZW50KGFkRXZlbnQpKTtcbiAgICB0aGlzLmFkc01hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgZ29vZ2xlLmltYS5BZEV2ZW50LlR5cGUuQURfQlJFQUtfUkVBRFksXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZygnQURfQlJFQUtfUkVBRFknKTtcbiAgICAgICAgICAvLyB0aGlzLmFkc01hbmFnZXIuc3RhcnQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAvLyBMaXN0ZW4gdG8gYW55IGFkZGl0aW9uYWwgZXZlbnRzLCBpZiBuZWNlc3NhcnkuXG4gICAgdGhpcy5hZHNNYW5hZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIGdvb2dsZS5pbWEuQWRFdmVudC5UeXBlLkxPQURFRCxcbiAgICAgICAgYWRFdmVudCA9PiB0aGlzLl9vbkFkRXZlbnQoYWRFdmVudCkpO1xuICAgIHRoaXMuYWRzTWFuYWdlci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICBnb29nbGUuaW1hLkFkRXZlbnQuVHlwZS5TVEFSVEVELFxuICAgICAgICBhZEV2ZW50ID0+IHRoaXMuX29uQWRFdmVudChhZEV2ZW50KSk7XG4gICAgdGhpcy5hZHNNYW5hZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIGdvb2dsZS5pbWEuQWRFdmVudC5UeXBlLkNPTVBMRVRFLFxuICAgICAgICBhZEV2ZW50ID0+IHRoaXMuX29uQWRFdmVudChhZEV2ZW50KSApO1xuICB9XG5cbiAgX29uQWRFdmVudChhZEV2ZW50KSB7XG4gICAgXG4gICAgY29uc3QgeyBjb250YWluZXIgfSA9IHRoaXMucGx5ci5lbGVtZW50cztcblxuICAgIC8vIFJldHJpZXZlIHRoZSBhZCBmcm9tIHRoZSBldmVudC4gU29tZSBldmVudHMgKGUuZy4gQUxMX0FEU19DT01QTEVURUQpXG4gICAgLy8gZG9uJ3QgaGF2ZSBhZCBvYmplY3QgYXNzb2NpYXRlZC5cbiAgICBjb25zdCBhZCA9IGFkRXZlbnQuZ2V0QWQoKTtcblxuICAgIC8vIGxldCBpbnRlcnZhbFRpbWVyO1xuICAgIFxuICAgIHN3aXRjaCAoYWRFdmVudC50eXBlKSB7XG4gICAgICBjYXNlIGdvb2dsZS5pbWEuQWRFdmVudC5UeXBlLkxPQURFRDpcbiAgICAgICAgY29uc29sZS5sb2coJ0xPQURFRCcpO1xuICAgICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBldmVudCBzZW50IGZvciBhbiBhZCAtIGl0IGlzIHBvc3NpYmxlIHRvXG4gICAgICAgIC8vIGRldGVybWluZSB3aGV0aGVyIHRoZSBhZCBpcyBhIHZpZGVvIGFkIG9yIGFuIG92ZXJsYXkuXG4gICAgICAgIGlmICghYWQuaXNMaW5lYXIoKSkge1xuICAgICAgICAgIC8vIFBvc2l0aW9uIEFkRGlzcGxheUNvbnRhaW5lciBjb3JyZWN0bHkgZm9yIG92ZXJsYXkuXG4gICAgICAgICAgYWQud2lkdGggPSBjb250YWluZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgYWQuaGVpZ2h0ID0gY29udGFpbmVyLm9mZnNldEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZ29vZ2xlLmltYS5BZEV2ZW50LlR5cGUuU1RBUlRFRDpcbiAgICAgICAgY29uc29sZS5sb2coJ1NUQVJURUQnKVxuICAvLyAgICAgICAvLyBUaGlzIGV2ZW50IGluZGljYXRlcyB0aGUgYWQgaGFzIHN0YXJ0ZWQgLSB0aGUgdmlkZW8gcGxheWVyXG4gIC8vICAgICAgIC8vIGNhbiBhZGp1c3QgdGhlIFVJLCBmb3IgZXhhbXBsZSBkaXNwbGF5IGEgcGF1c2UgYnV0dG9uIGFuZFxuICAvLyAgICAgICAvLyByZW1haW5pbmcgdGltZS5cbiAgLy8gICAgICAgaWYgKGFkLmlzTGluZWFyKCkpIHtcbiAgLy8gICAgICAgICAvLyBGb3IgYSBsaW5lYXIgYWQsIGEgdGltZXIgY2FuIGJlIHN0YXJ0ZWQgdG8gcG9sbCBmb3JcbiAgLy8gICAgICAgICAvLyB0aGUgcmVtYWluaW5nIHRpbWUuXG4gIC8vICAgICAgICAgLy8gaW50ZXJ2YWxUaW1lciA9IHNldEludGVydmFsKFxuICAvLyAgICAgICAgIC8vICAgICAoKSA9PiB7XG4gIC8vICAgICAgICAgLy8gICAgICAgbGV0IHJlbWFpbmluZ1RpbWUgPSB0aGlzLmFkc01hbmFnZXIuZ2V0UmVtYWluaW5nVGltZSgpO1xuICAvLyAgICAgICAgIC8vICAgICAgIGNvbnNvbGUubG9nKHJlbWFpbmluZ1RpbWUpO1xuICAvLyAgICAgICAgIC8vICAgICB9LFxuICAvLyAgICAgICAgIC8vICAgICAzMDApOyAvLyBldmVyeSAzMDBtc1xuICAvLyAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBnb29nbGUuaW1hLkFkRXZlbnQuVHlwZS5DT05URU5UX1BBVVNFX1JFUVVFU1RFRDpcbiAgICAgICAgY29uc29sZS5sb2coJ0NPTlRFTlRfUEFVU0VfUkVRVUVTVEVEJylcbiAgICAgIGNhc2UgZ29vZ2xlLmltYS5BZEV2ZW50LlR5cGUuQ09NUExFVEU6XG4gICAgICAgIGNvbnNvbGUubG9nKCdDT01QTEVURScpO1xuICAgICAgICB0aGlzLnBseXIucGxheSgpO1xuICAvLyAgICAgICAvLyBUaGlzIGV2ZW50IGluZGljYXRlcyB0aGUgYWQgaGFzIGZpbmlzaGVkIC0gdGhlIHZpZGVvIHBsYXllclxuICAvLyAgICAgICAvLyBjYW4gcGVyZm9ybSBhcHByb3ByaWF0ZSBVSSBhY3Rpb25zLCBzdWNoIGFzIHJlbW92aW5nIHRoZSB0aW1lciBmb3JcbiAgLy8gICAgICAgLy8gcmVtYWluaW5nIHRpbWUgZGV0ZWN0aW9uLlxuICAvLyAgICAgICAvLyBjbGVhckludGVydmFsKGludGVydmFsVGltZXIpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgZ29vZ2xlLmltYS5BZEV2ZW50LlR5cGUuQUxMX0FEU19DT01QTEVURUQ6XG4gICAgICAgIGNvbnNvbGUubG9nKCdBTExfQURTX0NPTVBMRVRFRCcpXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBfb25BZEVycm9yKGFkRXJyb3JFdmVudCkge1xuICAgIFxuICAgIC8vIEhhbmRsZSB0aGUgZXJyb3IgbG9nZ2luZy5cbiAgICB0aGlzLmFkRGlzcGxheUVsZW1lbnQucmVtb3ZlKCk7XG5cbiAgICBpZiAodGhpcy5hZHNNYW5hZ2VyKSB7XG4gICAgICB0aGlzLmFkc01hbmFnZXIuZGVzdHJveSgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbmZpZy5kZWJ1Zykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGFkRXJyb3JFdmVudCk7XG4gICAgfVxuICB9XG4gIFxuICBfb25Db250ZW50UGF1c2VSZXF1ZXN0ZWQoKSB7XG4gICAgY29uc29sZS5sb2coJ0NPTlRFTlRfUkVTVU1FX1JFUVVFU1RFRCcpO1xuICAvLyAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgd2hlcmUgeW91IHNob3VsZCBzZXR1cCBVSSBmb3Igc2hvd2luZyBhZHMgKGUuZy5cbiAgLy8gICAvLyBkaXNwbGF5IGFkIHRpbWVyIGNvdW50ZG93biwgZGlzYWJsZSBzZWVraW5nIGV0Yy4pXG4gIC8vICAgLy8gc2V0dXBVSUZvckFkcygpO1xuICB9XG5cbiAgLy8gX29uQ29udGVudFJlc3VtZVJlcXVlc3RlZCgpIHtcbiAgLy8gICB0aGlzLnBseXIucGxheSgpO1xuICAvLyAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgd2hlcmUgeW91IHNob3VsZCBlbnN1cmUgdGhhdCB5b3VyIFVJIGlzIHJlYWR5XG4gIC8vICAgLy8gdG8gcGxheSBjb250ZW50LiBJdCBpcyB0aGUgcmVzcG9uc2liaWxpdHkgb2YgdGhlIFB1Ymxpc2hlciB0b1xuICAvLyAgIC8vIGltcGxlbWVudCB0aGlzIGZ1bmN0aW9uIHdoZW4gbmVjZXNzYXJ5LlxuICAvLyAgIC8vIHNldHVwVUlGb3JDb250ZW50KCk7XG4gIC8vIH1cblxuICBfc2V0dXBBZERpc3BsYXlDb250YWluZXIoKSB7XG4gICAgY29uc3QgeyBjb250YWluZXIsIG9yaWdpbmFsIH0gPSB0aGlzLnBseXIuZWxlbWVudHM7XG4gICAgICBcbiAgICAvLyBXZSBhc3N1bWUgdGhlIGFkQ29udGFpbmVyIGlzIHRoZSB2aWRlbyBjb250YWluZXIgb2YgdGhlIHBseXIgZWxlbWVudFxuICAgIC8vIHRoYXQgd2lsbCBob3VzZSB0aGUgYWRzLlxuICAgIHRoaXMuYWREaXNwbGF5Q29udGFpbmVyID0gbmV3IGdvb2dsZS5pbWEuQWREaXNwbGF5Q29udGFpbmVyKGNvbnRhaW5lcik7XG5cbiAgICB0aGlzLmFkRGlzcGxheUVsZW1lbnQgPSBjb250YWluZXIuZmlyc3RDaGlsZDtcblxuICAgIC8vIFRoZSBBZERpc3BsYXlDb250YWluZXIgY2FsbCBmcm9tIGdvb2dsZSBpbWEgc2V0cyB0aGUgc3R5bGUgYXR0cmlidXRlXG4gICAgLy8gYnkgZGVmYXVsdC4gV2UgcmVtb3ZlIHRoZSBpbmxpbmUgc3R5bGUgYW5kIHNldCBpdCB0aHJvdWdoIHRoZSBzdHlsZXNoZWV0LlxuICAgIHRoaXMuYWREaXNwbGF5RWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgXG4gICAgLy8gU2V0IGNsYXNzIG5hbWUgb24gdGhlIGFkRGlzcGxheUNvbnRhaW5lciBlbGVtZW50LlxuICAgIHRoaXMuYWREaXNwbGF5RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgJ3BseXItYWRzJyk7XG5cbiAgICAvLyBQbGF5IGFkcyB3aGVuIGNsaWNrZWQuXG4gICAgdGhpcy5fc2V0T25DbGlja0hhbmRsZXIodGhpcy5hZERpc3BsYXlFbGVtZW50LCB0aGlzLl9wbGF5QWRzKTtcbiAgfVxuXG4gIF9wbGF5QWRzKCkge1xuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSB0aGlzLnBseXIuZWxlbWVudHM7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBjb250YWluZXIuIE11c3QgYmUgZG9uZSB2aWEgYSB1c2VyIGFjdGlvbiBvbiBtb2JpbGUgZGV2aWNlcy5cbiAgICB0aGlzLmFkRGlzcGxheUNvbnRhaW5lci5pbml0aWFsaXplKCk7XG5cbiAgICAvLyBJbml0aWFsaXplIHRoZSBhZHMgbWFuYWdlci4gQWQgcnVsZXMgcGxheWxpc3Qgd2lsbCBzdGFydCBhdCB0aGlzIHRpbWUuXG4gICAgdGhpcy5hZHNNYW5hZ2VyLmluaXQoXG4gICAgICBjb250YWluZXIub2Zmc2V0V2lkdGgsXG4gICAgICBjb250YWluZXIub2Zmc2V0SGVpZ2h0LFxuICAgICAgZ29vZ2xlLmltYS5WaWV3TW9kZS5OT1JNQUxcbiAgICApO1xuXG4gICAgLy8gQ2FsbCBwbGF5IHRvIHN0YXJ0IHNob3dpbmcgdGhlIGFkLiBTaW5nbGUgdmlkZW8gYW5kIG92ZXJsYXkgYWRzIHdpbGxcbiAgICAvLyBzdGFydCBhdCB0aGlzIHRpbWU7IHRoZSBjYWxsIHdpbGwgYmUgaWdub3JlZCBmb3IgYWQgcnVsZXMuXG4gICAgdGhpcy5hZHNNYW5hZ2VyLnN0YXJ0KCk7XG4gICAgXG4gICAgLy8gdHJ5IHtcbiAgICBcbiAgICAvLyB9IGNhdGNoIChhZEVycm9yKSB7XG5cbiAgICAvLyAgIC8vIEFuIGVycm9yIG1heSBiZSB0aHJvd24gaWYgdGhlcmUgd2FzIGEgcHJvYmxlbSB3aXRoIHRoZSBWQVNUIHJlc3BvbnNlLlxuICAgIC8vICAgdGhpcy5wbHlyLnBsYXkoKTtcbiAgICAvLyAgIHRoaXMuYWREaXNwbGF5RWxlbWVudC5yZW1vdmUoKTtcblxuICAgIC8vICAgaWYgKHRoaXMuY29uZmlnLmRlYnVnKSB7XG4gICAgLy8gICAgIHRocm93IG5ldyBFcnJvcihhZEVycm9yKTtcbiAgICAvLyAgIH1cbiAgICAvLyB9XG4gIH1cblxuICBfc2V0dXBMaXN0ZW5lcnMoKSB7XG5cbiAgICAvLyBBZGQgbGlzdGVuZXJzIHRvIHRoZSByZXF1aXJlZCBldmVudHMuXG4gICAgdGhpcy5wbHlyLm9uKCdlbmRlZCcsIChldmVudCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ0VOREVEJyk7XG4gICAgICB0aGlzLmFkc0xvYWRlci5jb250ZW50Q29tcGxldGUoKTtcbiAgICB9KTtcbiAgICB0aGlzLnBseXIub24oJ3N0YXRlY2hhbmdlJywgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQuZGV0YWlsLmNvZGUgPT09IDEpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1lPVVRVQkUgRU5ERUQnKTtcbiAgICAgICAgdGhpcy5hZHNMb2FkZXIuY29udGVudENvbXBsZXRlKCk7XG4gICAgICB9IFxuICAgIH0pO1xuXG4gIH1cblxuICAvLyBTZXQncyBhIHN0YXJ0IGV2ZW50IGxpc3RlbmVyIG9uIGEgRE9NIGVsZW1lbnQgYW5kIHRyaWdnZXJzIHRoZVxuICAvLyBjYWxsYmFjayB3aGVuIGNsaWNrZWQuIFxuICBfc2V0T25DbGlja0hhbmRsZXIoZWxlbWVudCwgY2FsbGJhY2spIHtcbiAgICBmb3IgKGxldCBzdGFydEV2ZW50IG9mIHRoaXMuY29uZmlnLnN0YXJ0RXZlbnRzKSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoc3RhcnRFdmVudCwgKGV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChldmVudC50eXBlID09PSAndG91Y2hlbmQnICYmXG4gICAgICAgICAgICBzdGFydEV2ZW50ID09PSAndG91Y2hzdGFydCcgfHxcbiAgICAgICAgICAgIGV2ZW50LnR5cGUgPT09ICdjbGljaycpIHtcbiAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICB9LCB7b25jZTogdHJ1ZX0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIE1lcmdlIGRlZmF1bHRzIGFuZCBvcHRpb25zLlxuICBfbWVyZ2VkQ29uZmlnKGRlZmF1bHRzLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHsuLi5kZWZhdWx0cywgLi4ub3B0aW9uc307XG4gIH1cblxuICAvLyBFdmVudHMgYXJlIGRpZmZlcmVudCBvbiB2YXJpb3VzIGRldmljZXMuIFdlIGRldCB0aGUgY29ycmVjdCBldmVudHMsIGJhc2VkIG9uIHVzZXJBZ2VudC5cbiAgX2dldFN0YXJ0RXZlbnRzKCkge1xuICAgIGxldCBzdGFydEV2ZW50cyA9IFsnY2xpY2snXTtcbiAgICBcbiAgICAvLyBGb3IgbW9iaWxlIHVzZXJzIHRoZSBzdGFydCBldmVudCB3aWxsIGJlIG9uZSBvZlxuICAgIC8vIHRvdWNoc3RhcnQsIHRvdWNoZW5kIGFuZCB0b3VjaG1vdmUuXG4gICAgaWYgKG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL2lQaG9uZS9pKSB8fFxuICAgICAgICBuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9pUGFkL2kpIHx8XG4gICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL0FuZHJvaWQvaSkpIHtcbiAgICAgICAgc3RhcnRFdmVudHMgPSBbJ3RvdWNoc3RhcnQnLCAndG91Y2hlbmQnLCAndG91Y2htb3ZlJ107XG4gICAgfVxuICAgIHJldHVybiBzdGFydEV2ZW50cztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGluaXQ6ICh0YXJnZXQsIG9wdGlvbnMpID0+IG5ldyBQbHlyQWRzKHRhcmdldCwgb3B0aW9ucylcbn07XG4iXSwibmFtZXMiOlsiZGVmYXVsdHMiLCJQbHlyQWRzIiwidGFyZ2V0Iiwib3B0aW9ucyIsImNvbmZpZyIsInRoaXMiLCJfbWVyZ2VkQ29uZmlnIiwic3RhcnRFdmVudHMiLCJfZ2V0U3RhcnRFdmVudHMiLCJwbHlyIiwiYWREaXNwbGF5Q29udGFpbmVyIiwiYWREaXNwbGF5RWxlbWVudCIsImFkc01hbmFnZXIiLCJhZHNMb2FkZXIiLCJhZFRhZ1VybCIsIkVycm9yIiwid2luZG93IiwiZ29vZ2xlIiwiX3NldHVwQWREaXNwbGF5Q29udGFpbmVyIiwiX3NldHVwSU1BIiwiX3NldHVwTGlzdGVuZXJzIiwiY29udGFpbmVyIiwiZWxlbWVudHMiLCJpbWEiLCJBZHNMb2FkZXIiLCJnZXRTZXR0aW5ncyIsInNldEF1dG9QbGF5QWRCcmVha3MiLCJhZGRFdmVudExpc3RlbmVyIiwiQWRzTWFuYWdlckxvYWRlZEV2ZW50IiwiVHlwZSIsIkFEU19NQU5BR0VSX0xPQURFRCIsIl90aGlzIiwiX29uQWRzTWFuYWdlckxvYWRlZCIsImFkRXZlbnQiLCJBZEVycm9yRXZlbnQiLCJBRF9FUlJPUiIsIl9vbkFkRXJyb3IiLCJhZEVycm9yIiwiYWRzUmVxdWVzdCIsIkFkc1JlcXVlc3QiLCJsaW5lYXJBZFNsb3RXaWR0aCIsIm9mZnNldFdpZHRoIiwibGluZWFyQWRTbG90SGVpZ2h0Iiwib2Zmc2V0SGVpZ2h0Iiwibm9uTGluZWFyQWRTbG90V2lkdGgiLCJub25MaW5lYXJBZFNsb3RIZWlnaHQiLCJyZXF1ZXN0QWRzIiwiYWRzTWFuYWdlckxvYWRlZEV2ZW50IiwiYWRzUmVuZGVyaW5nU2V0dGluZ3MiLCJBZHNSZW5kZXJpbmdTZXR0aW5ncyIsInJlc3RvcmVDdXN0b21QbGF5YmFja1N0YXRlT25BZEJyZWFrQ29tcGxldGUiLCJsb2ciLCJjdXJyZW50VGltZSIsImR1cmF0aW9uIiwiZ2V0QWRzTWFuYWdlciIsIl90aGlzMiIsIkFkRXZlbnQiLCJDT05URU5UX1BBVVNFX1JFUVVFU1RFRCIsIl9vbkNvbnRlbnRQYXVzZVJlcXVlc3RlZCIsIkFMTF9BRFNfQ09NUExFVEVEIiwiX29uQWRFdmVudCIsIkFEX0JSRUFLX1JFQURZIiwiTE9BREVEIiwiU1RBUlRFRCIsIkNPTVBMRVRFIiwiYWQiLCJnZXRBZCIsInR5cGUiLCJpc0xpbmVhciIsIndpZHRoIiwiaGVpZ2h0IiwicGxheSIsImFkRXJyb3JFdmVudCIsInJlbW92ZSIsImRlc3Ryb3kiLCJkZWJ1ZyIsIkFkRGlzcGxheUNvbnRhaW5lciIsImZpcnN0Q2hpbGQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJfc2V0T25DbGlja0hhbmRsZXIiLCJfcGxheUFkcyIsImluaXRpYWxpemUiLCJpbml0IiwiVmlld01vZGUiLCJOT1JNQUwiLCJzdGFydCIsIm9uIiwiZXZlbnQiLCJjb250ZW50Q29tcGxldGUiLCJkZXRhaWwiLCJjb2RlIiwiZWxlbWVudCIsImNhbGxiYWNrIiwic3RhcnRFdmVudCIsImNhbGwiLCJvbmNlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibWF0Y2giXSwibWFwcGluZ3MiOiI2TEFDQSxJQUFNQSxZQUNRLHdCQUVHLE9BQ0gsZ0JBQ0MsOFpDSVRDLHdCQUVRQyxFQUFRQyxnSEFDYkMsT0FBU0MsS0FBS0MsY0FBY04sRUFBVUcsUUFDdENDLE9BQU9HLFlBQWNGLEtBQUtHLHVCQUUxQkMsS0FBT1AsT0FDUFEsd0JBQ0FDLHNCQUNBQyxnQkFDQUMsV0FHQVIsS0FBS0QsT0FBT1UsZUFBa0IsSUFBSUMsTUFBTSw2QkFHeENDLE9BQU9DLGFBQWdCLElBQUlGLE1BQU0sMkNBR2pDRyxnQ0FHQUMsaUJBR0FDLDJFQUlHQyxFQUFjaEIsS0FBS0ksS0FBS2EsU0FBeEJELGVBR0hSLFVBQVksSUFBSUksT0FBT00sSUFBSUMsVUFBVW5CLEtBQUtLLHlCQUcxQ0csVUFBVVksY0FBY0MscUJBQW9CLFFBRzVDYixVQUFVYyxpQkFDWFYsT0FBT00sSUFBSUssc0JBQXNCQyxLQUFLQyxtQkFDdEMsbUJBQVdDLEVBQUtDLG9CQUFvQkMsS0FDcEMsUUFDQ3BCLFVBQVVjLGlCQUNYVixPQUFPTSxJQUFJVyxhQUFhTCxLQUFLTSxTQUM3QixtQkFBV0osRUFBS0ssV0FBV0MsS0FDM0IsT0FHRUMsRUFBYSxJQUFJckIsT0FBT00sSUFBSWdCLGFBQ3ZCekIsU0FBV1QsS0FBS0QsT0FBT1UsV0FJdkIwQixrQkFBb0JuQixFQUFVb0IsY0FDOUJDLG1CQUFxQnJCLEVBQVVzQixlQUMvQkMscUJBQXVCdkIsRUFBVW9CLGNBQ2pDSSxzQkFBd0J4QixFQUFVc0Isa0JBRXhDOUIsVUFBVWlDLFdBQVdSLCtDQUdSUyxjQUlaQyxFQUF1QixJQUFJL0IsT0FBT00sSUFBSTBCLHVCQUN2QkMsNkNBQThDLFVBRTNEQyxJQUFJOUMsS0FBS0ksS0FBSzJDLHFCQUNkRCxJQUFJOUMsS0FBS0ksS0FB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
