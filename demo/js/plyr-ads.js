!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define("PlyrAds",t):e.PlyrAds=t()}(this,function(){"use strict";var e={adTagUrl:"",skipButton:{enabled:!0,text:"Skip ad",delay:10}},t=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},n=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),i=function(){function i(t,n){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i),this.config=this._mergedConfig(e,n),this.config.startEvents=this._getStartEvents(),this.plyr=t,this.adDisplayContainer,this.adDisplayElement,this.adsManager,this.adsLoader,this.videoElement=document.createElement("video"),!this.config.adTagUrl)throw new Error("No adTagUrl provided.");if(!window.google)throw new Error("The Google IMA3 SDK is not loaded.");this._setupAdDisplayContainer(),this._setupIMA(),this._setupListeners()}return n(i,[{key:"_setupIMA",value:function(){var e=this,t=this.plyr.elements.container;this.adsLoader=new google.ima.AdsLoader(this.adDisplayContainer,this.videoElement),this.adsLoader.getSettings().setAutoPlayAdBreaks(!1),this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,function(t){return e._onAdsManagerLoaded(t)},!1),this.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR,function(t){return e._onAdError(t)},!1);var n=new google.ima.AdsRequest;n.adTagUrl=this.config.adTagUrl,n.linearAdSlotWidth=t.offsetWidth,n.linearAdSlotHeight=t.offsetHeight,n.nonLinearAdSlotWidth=t.offsetWidth,n.nonLinearAdSlotHeight=t.offsetHeight,this.adsLoader.requestAds(n)}},{key:"_onAdsManagerLoaded",value:function(e){var t=this,n=this.videoElement,i=new google.ima.AdsRenderingSettings;i.restoreCustomPlaybackStateOnAdBreakComplete=!0,this.adsManager=e.getAdsManager(n,i),this.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR,function(e){return t._onAdError(e)}),this.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED,function(e){return t._onAdEvent(e)}),this.adsManager.addEventListener(google.ima.AdEvent.Type.AD_BREAK_READY,function(e){t.plyr.pause(),t.adsManager.start()}),this.adsManager.addEventListener(google.ima.AdEvent.Type.LOADED,function(e){return t._onAdEvent(e)}),this.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED,function(e){return t._onAdEvent(e)}),this.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE,function(e){return t._onAdEvent(e)})}},{key:"_onAdEvent",value:function(e){var t=this.plyr.elements.container,n=e.getAd();switch(e.type){case google.ima.AdEvent.Type.LOADED:console.log("LOADED"),n.isLinear()||(n.width=t.offsetWidth,n.height=t.offsetHeight);break;case google.ima.AdEvent.Type.STARTED:console.log("STARTED"),this.adDisplayElement.style.display="block";break;case google.ima.AdEvent.Type.COMPLETE:console.log("COMPLETE"),this.adDisplayElement.style.display="none",this.plyr.currentTime<this.plyr.duration&&this.plyr.play();break;case google.ima.AdEvent.Type.ALL_ADS_COMPLETED:console.log("ALL_ADS_COMPLETED"),this.plyr.stop()}}},{key:"_onAdError",value:function(e){if(this.adDisplayElement.remove(),this.adsManager&&this.adsManager.destroy(),this.config.debug)throw new Error(e)}},{key:"_onContentPauseRequested",value:function(){console.log("CONTENT_RESUME_REQUESTED")}},{key:"_onContentResumeRequested",value:function(){console.log("CONTENT_RESUME_REQUESTED")}},{key:"_setupAdDisplayContainer",value:function(){var e=this.plyr.elements.container;this.adDisplayContainer=new google.ima.AdDisplayContainer(e),this.adDisplayElement=e.firstChild,this.adDisplayElement.removeAttribute("style"),this.adDisplayElement.setAttribute("class","plyr-ads"),this._setOnClickHandler(this.adDisplayElement,this._playAds)}},{key:"_playAds",value:function(){var e=this.plyr.elements.container;this.adDisplayContainer.initialize(),this.adsManager.init(e.offsetWidth,e.offsetHeight,google.ima.ViewMode.NORMAL),this.adsManager.start()}},{key:"_setupListeners",value:function(){var e=this;this.plyr.on("ended",function(t){console.log("ENDED"),e.adsLoader.contentComplete()}),this.plyr.on("timeupdate",function(t){var n=t.detail.plyr.currentTime;e.videoElement.currentTime=Math.ceil(n)}),this.plyr.on("statechange",function(t){1===t.detail.code&&(console.log("YOUTUBE ENDED"),e.adsLoader.contentComplete())})}},{key:"_setOnClickHandler",value:function(e,t){var n=this,i=function(i){e.addEventListener(i,function(e){("touchend"===e.type&&"touchend"===i||"click"===e.type)&&t.call(n)},{once:!0})},a=!0,o=!1,r=void 0;try{for(var s,d=this.config.startEvents[Symbol.iterator]();!(a=(s=d.next()).done);a=!0){i(s.value)}}catch(e){o=!0,r=e}finally{try{!a&&d.return&&d.return()}finally{if(o)throw r}}}},{key:"_mergedConfig",value:function(e,n){return t({},e,n)}},{key:"_getStartEvents",value:function(){var e=["click"];return(navigator.userAgent.match(/iPhone/i)||navigator.userAgent.match(/iPad/i)||navigator.userAgent.match(/Android/i))&&(e=["touchstart","touchend","touchmove"]),e}}]),i}();return{init:function(e,t){return new i(e,t)}}});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
